apply plugin: 'maven'
apply plugin: 'maven-publish'

repositories {
    mavenCentral()
}

def moduleName = "${project.name}"
def version = "$rootProject.ext.PUBLISH_VERSION"

task uploadLocal(type: Upload) {
    // 需要把config设置成project的，要不然会报错
    configuration = project.configurations.findByName('archives')
    repositories {
        mavenDeployer {
            def localDir = uri("${rootProject.buildFile.parentFile.absolutePath}/repos")
            snapshotRepository(url: localDir)
            repository(url: localDir)
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            snapshotRepository(url: 'https://packages.aliyun.com/maven/repository/2286124-snapshot-J8DIRD/') {
                authentication(userName: '633402a80bdb33a273af19d9', password: 'Td2ccL9NNLm-')
            }
            repository(url: 'https://packages.aliyun.com/maven/repository/2286124-release-1d6Qi3/') {
                authentication(userName: '633402a80bdb33a273af19d9', password: 'Td2ccL9NNLm-')
            }
            pom.project {
                groupId = "$rootProject.ext.PUBLISH_GROUP_ID"
                artifactId "$rootProject.ext.PUBLISH_ARTIFACT_ID"
            }
            pom.version = "$version"
        }
    }
}

uploadArchives.dependsOn uploadLocal


ext.mavenUrl = 'https://packages.aliyun.com/maven/repository/2286124-release-1d6Qi3/'
ext.pomFile = "${project.buildDir.getPath()}/publications/maven/pom-default.xml"
if (!ext.has("packaging")) {
    ext.packaging = 'aar'
}
if (ext.packaging == 'aar') {
    ext.uploadFile = "${project.buildDir.getPath()}/outputs/aar/${project.name}-release.aar"
} else {
    ext.uploadFile = "${project.buildDir.getPath()}/libs/${project.name}-${version}.jar"
}
ext.sourcesFile = "${project.buildDir.getPath()}/libs/${project.name}-${version}-sources.jar"
ext.javadocFile = "${project.buildDir.getPath()}/libs/${project.name}-${version}-javadoc.jar"

task mavenUpload {
    doLast {
        exec {
            commandLine "mvn", "deploy:deploy-file",
                "-DpomFile=" + pomFile,
                "-Dpackaging=" + packaging,
                "-Durl=" + mavenUrl,
                "-Dfile=" + uploadFile,
                "-Dsources=" + sourcesFile,
                "-Djavadoc=" + javadocFile,
                "-DrepositoryId=rxAndroid.releases"
        }
    }
}

mavenUpload.dependsOn clean
mavenUpload.dependsOn publishToMavenLocal
publishToMavenLocal.mustRunAfter clean

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = "$moduleName"
            def isAARPackaging = "aar" == "${project.ext.packaging}"

            if (isAARPackaging) {
                task androidJavadocs(type: Javadoc) {
                    source = android.sourceSets.main.java.srcDirs
                    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
                    android.libraryVariants.all { variant ->
                        if (variant.name == 'release') {
                            owner.classpath += variant.javaCompile.classpath
                        }
                    }
                    failOnError false
                    exclude '**/R.html', '**/R.*.html', '**/index.html'
                }

                task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
                    classifier = 'javadoc'
                    from androidJavadocs.destinationDir
                }

                task androidSourcesJar(type: Jar) {
                    classifier = 'sources'
                    from android.sourceSets.main.java.srcDirs
                }

                afterEvaluate {
                    artifact bundleReleaseAar
                    artifact androidSourcesJar
                    artifact androidJavadocsJar
                }
            } else {
                from components.java

                task javaJavadocsJar(type: Jar) {
                    javadoc.options.encoding = "UTF-8"
                    from javadoc
                    classifier = 'javadoc'
                }

                task javaSourcesJar(type: Jar) {
                    from sourceSets.main.allJava
                    classifier = 'sources'
                }

                artifact javaSourcesJar
                artifact javaJavadocsJar
            }

            pom.withXml {
                asNode().appendNode('build').appendNode("finalName", artifactId)

                final repository = asNode().appendNode('distributionManagement').appendNode('repository')
                repository.appendNode("uniqueVersion", "false")
                repository.appendNode("layout", "default")
                repository.appendNode("id", "rxAndroid.releases")
                repository.appendNode("name", "rxAndroid")
                repository.appendNode("url", "${project.ext.mavenUrl}")
            }
            if (isAARPackaging) {
                pom.withXml {
                    final dependenciesNode = asNode().appendNode('dependencies')
                    ext.addDependency = { Dependency dep, String scope ->
                        if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified") {
                            return // ignore invalid dependencies
                        }
                        final dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dep.group)
                        dependencyNode.appendNode('artifactId', dep.name)
                        dependencyNode.appendNode('version', dep.version)
                        dependencyNode.appendNode('scope', scope)
                        if (!dep.transitive) {
                            // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            exclusionNode.appendNode('groupId', '*')
                            exclusionNode.appendNode('artifactId', '*')
                        } else if (!dep.properties.excludeRules.empty) {
                            // Otherwise add specified exclude rules
                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            dep.properties.excludeRules.each { ExcludeRule rule ->
                                exclusionNode.appendNode('groupId', rule.group ?: '*')
                                exclusionNode.appendNode('artifactId', rule.module ?: '*')
                            }
                        }
                    }
                    // List all "compile" dependencies (for old Gradle)
                    configurations.compile.getAllDependencies().each { dep -> addDependency(dep, "compile") }
                    // List all "api" dependencies (for new Gradle) as "compile" dependencies
                    configurations.api.getAllDependencies().each { dep -> addDependency(dep, "compile") }
                    // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
                    configurations.implementation.getAllDependencies().each { dep ->
                        if (!configurations.api.getAllDependencies().contains(dep)) {
                            addDependency(dep, "runtime")
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url = "${project.ext.mavenUrl}"
        }
    }
}